五分频
library  ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
entity div5 is
port(clk5:in std_logic;
	 kf:out std_logic);
end;
architecture bhv of div5 is
 	signal c1,c2: std_logic_vector(2 downto 0);
  	signal m1,m2: std_logic;
begin
process(clk5,c1)  
begin
 	if rising_edge(clk5) then
 	if(c1="100") then c1<="000"; 
	else c1<=c1+1;
	end if;
 	if(c1="001") then m1<=not m1;
	elsif(c1="011") then m1<=not m1;
 	end if;
    end if;
end process;
process(clk5,c2)  begin
  	if falling_edge(clk5) then
 	if(c2="100") then c2<="000";
	else c2<=c2+1;
	end if;
  	if(c2="001") then m2<=not m2;
	elsif(c2="011") then  m2<=not m2;
	end if; 
	end if;
end process;
kf<=m1 or m2;
end bhv;

十分频
library  ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
entity  div10  is
port (clk10:in std_logic;
      k:out std_logic);
end;
architecture bhv of div10 is
    signal s : std_logic;
    signal c : std_logic_vector(3 downto 0);
begin
process(clk10,c)
begin
    if rising_edge(clk10) then
    if (c="1001") then c<="0000";
    else c<=c+1;
    end if;
    if (c="0101") then s<=not s;
    elsif(c="0000") then s<=not s;
    end if;
    end if;
end process;
k<=s;
end bhv;

2选1多路选择器
library  ieee;
use  ieee.std_logic_1164.all;
entity  mux21 is
port(a,b,s: in std_logic; 
     y : out std_logic);
end;
architecture bhv of mux21 is
begin
process(s)
begin
    case (s) is
    when '0' => y<=a;
    when '1' => y<=b;
    when others =>null;
    end case;
end process;
end bhv;

控制器
library ieee;  
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity ftct is
    port (	clk : in std_logic;                 
        	cnten : out std_logic;                 
       	    rst_cnt : out std_logic;                 
         	load : out std_logic    );              
 end ftct;

architecture behav of ftct is
signal div2clk : std_logic;
begin
 process( clk )
	begin
		if clk'event and clk = '1' then
            			div2clk <= not div2clk;
        		end if;
	end process;

	process (clk, div2clk)
	begin
		if clk='0' and div2clk='0' then 
			rst_cnt<='1';
          		else   rst_cnt <= '0';  
		end if;
	end process;
	load  <= not div2clk;    
	cnten <= div2clk;
end behav;

十进制计数器
library ieee;
use ieee.std_logic_1164.all;
entity cnt10 is
	port(fin:in std_logic;
		 clr:in std_logic;
		 enabl:in std_logic;
		 carry_out: out std_logic;
		 dout:out INTEGER RANGE 0 TO 15);
end cnt10;
architecture behav of cnt10 is
signal cq1:INTEGER RANGE 0 TO 15;
begin
	process(fin,clr,enabl)
	begin
		if clr='1' then cq1<=0;
		elsif fin'event and fin='1' then
		  if enabl='1' then
			if cq1<9 then cq1<=cq1+1;
			else cq1<=0;
			end if;
		  end if;
		end if;
	end process;
	process(cq1)
	begin
   		if cq1=9 then carry_out<='1';
   		else carry_out<='0';
   		end if;
	end process;
	dout<=cq1;
end behav;

4位锁存器
library ieee; 
use ieee.std_logic_1164.all;

entity reg32b is
    port (	lk : in std_logic;
	din : in std_logic_vector(3 downto 0);
	dout : out std_logic_vector(3 downto 0));
end reg32b;

architecture behav of reg32b is
begin
	process(lk, din)
	begin
		if lk'event and lk = '1' then  
			dout <= din;
		end if;
	end process;
end behav;

共阳极译码器
library ieee;
use ieee.std_logic_1164.all;
entity decod is
	port(a:in std_logic_vector(3 downto 0);
		led7s:out std_logic_vector(6 downto 0));
end decod;
architecture behav of decod is
begin
	process(a)
	  begin
		case a is
			when "0000" =>led7s <="1000000";
			when "0001" =>led7s <="1111001";
			when "0010" =>led7s <="0100100";
			when "0011" =>led7s <="0110000";
			when "0100" =>led7s <="0011001";
			when "0101" =>led7s <="0010010";
			when "0110" =>led7s <="0000010";
			when "0111" =>led7s <="1111000";
			when "1000" =>led7s <="0000000";
			when "1001" =>led7s <="0010000";
			when others => null;
		end case;
	end process;
end behav;
