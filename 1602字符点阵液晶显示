#include <reg51.h>
#include <intrins.h>
#include <stdio.h>
#include "LCM16X2P.H"
#define LCM_DB P2
#define OSC 11059200
#define uchar unsigned char

sbit LCM_RS = P1^0; //1602的数据/指令选择控制线 
sbit LCM_RW = P1^1;	//1602的读写控制线 
sbit LCM_E = P1^2;  //1602的使能控制线
sbit LCM_BLC = P1^3;

void pre();
void write_com(uchar com);
void write_data(uchar date);
void  displaypage();

unsigned int data DelayConst = 140; //设定延时
unsigned char ucTH,ucTL,Ticks;

uchar code table1 [] = {0x10,0x0B,0x02,0x18,0x00,0x00,0x09,0x12};
uchar code table2 [] = {0x10,0x1C,0x14,0x10,0x10,0x10,0x12,0x1E};//沈
uchar code table3 [] = {0x02,0x04,0x08,0x1F,0x0A,0x04,0x0A,0x11};
uchar code table4 [] = {0x04,0x1F,0x04,0x1F,0x11,0x0E,0x04,0x0C};//婷
uchar code table5 [] = {0x02,0x04,0x08,0x1F,0x0A,0x04,0x0A,0x11};
uchar code table6 [] = {0x04,0x1F,0x04,0x1F,0x11,0x0E,0x04,0x0C};//婷

void main(void) //主函数
{
	EA=0;//停止所有中断
	Ticks=0;
	ucTH=(65536-OSC/12/20)/256;	 //计算50ms的定时的时间常数
	ucTL=(65536-OSC/12/20)%256;
	TMOD=0x01;  //T0：模式1，16位定时器
	TH0=ucTH;
	TL0=ucTL;
	ET0=1;  //T0允许中断
	TR0=1;  //启动定时器
	EA=1;  //打开总中断允许
	LCMInit();  //初始化LCM
	LCMClear();	//清屏
	displaypage();
	while(1);  
}

void displaypage() //displaypage函数,显示名字学号
{
	LCMClear();
	pre();
	write_com(0x80);
	write_data(0x00);
	write_data(0x01);
	LCMDelay(100000);
	write_data(0x02);
	write_data(0x03);
	LCMDelay(100000);
	write_data(0x04);
	write_data(0x05);
	LCMDisplayString(1,0,"208120604");
	LCMDelay(100000);
		
}

 void write_com(uchar com) //写字符
{
	LCM_RS=0;
	P2=com;
	LCMDelay(5);
	LCM_E=1;
	LCMDelay(5);
	LCM_E=0;
}

void write_data(uchar date) //写数据
{
	LCM_RS=1;
	P2=date;
	LCMDelay(5);
	LCM_E=1;
	LCMDelay(5);
	LCM_E=0;
}

void LCMDelay(int ms)	 //通过循环的方式延时
{
	unsigned int i,cnt;
	cnt = DelayConst * ms;
	for(i=0;i<cnt;i++);
}

unsigned char LCMReadState(void) //查询LCN的忙标志/当前AC的地址
{
	unsigned char state;
	LCM_E = 0;
	LCM_RS = 0;
	LCM_RW = 1;
	LCM_E = 1;
	_nop_();
	_nop_();
	state = LCM_DB;
	LCM_E = 0;
	return state;
}

void LCMClear(void)	//清屏
{
	LCMDelay(1);
	LCM_E = 0;
	LCM_RS = 0;
	LCM_RW = 0;
	LCM_DB = 0x01;
	LCM_E = 1;
	_nop_();
	_nop_();
	LCM_E = 0;
	LCMDelay(1);
}

void LCMWriteCmd(unsigned char cmd) //向LCM写入控制字
{
	LCMDelay(1);
	LCM_E = 0;
	LCM_RS = 0;
	LCM_RW = 0;
	LCM_DB = cmd;
	LCM_E = 1;
	_nop_();
	_nop_();
	LCM_E = 0;
}

void LCMWriteData(unsigned char dc)	 //向LCM写入数据
{	
	while(LCMReadState() & BUSYFLAG);
	LCM_RS = 1;
	LCM_RW = 0;
	LCM_DB = dc;
	LCM_E = 1;
	_nop_();
	_nop_();
	LCM_E = 0;
}

void LCMInit(void) //初始化LCM
{
	LCMDelay(60);
	 LCM_BLC = 0;
	LCMWriteCmd(0x38);
	LCMDelay(5);
	LCMWriteCmd(0x38);
	LCMDelay(1);
	LCMWriteCmd(0x38);
	while(LCMReadState() & BUSYFLAG);
	LCMWriteCmd(0x08);
	while(LCMReadState() & BUSYFLAG);
	LCMWriteCmd(0x01);
	while(LCMReadState() & BUSYFLAG);
	LCMWriteCmd(0x06);
	while(LCMReadState() & BUSYFLAG);
	LCMWriteCmd(0x0e);
	while(LCMReadState() & BUSYFLAG);
	pre();
}

void LCMGOtoXY(unsigned char x,unsigned char y)	//移动光标到X行，Y列
{
	unsigned char cmd;
	if(x==0)
	{
		cmd=0x80|y;
	}
	else
	{
		cmd=0x80|0x40|y;
	}
	LCMWriteCmd(cmd);
	while(LCMReadState()&BUSYFLAG);
}

void LCMDisplayChar(unsigned char x,unsigned char y,unsigned char ch) 
//在指定的位置显示一个字符
{
	LCMGotoXY(x,y);
	LCMWriteData(ch);
}

void LCMDisplayString(unsigned char x,unsigned char y,unsigned char * str)
{	
	unsigned char ptr;
	ptr = 0;
	while(*(str+ptr) != 0)
	{	
		LCMDisplayChar(x,(y+ptr),*(str+ptr));
		ptr++;
		LCMDelay(1000);
	}
}

void LCMBlink(unsigned char x,unsigned char y,unsigned char cmd) 
//将指定位置显示的字符闪烁（同时关闭光标）
{	
	LCMGotoXY(x,y);
	if(cmd == BLINK)
	{
		LCMWriteCmd(0x0d);
	}
	else
	{	
		LCMWriteCmd(0x0c);
	}
}


void TOISR(void)interrupt 1	 //中断
{
	TH0=ucTH;
	TL0=ucTL;
	TR0=1;
}

void pre() //显示中文
{
	uchar i;
	write_com(0x40);
	for(i=0;i<8;i++)
	{	
		write_data(table1[i]);
	}
	write_com(0x48);
	for(i=0;i<8;i++)
	{
		write_data(table2[i]);
	}
	write_com(0x48+0x08);
	for(i=0;i<8;i++)
	{	
		write_data(table3[i]);
	}
	write_com(0x48+0x08+0x08);
	for(i=0;i<8;i++)
	{	
		write_data(table4[i]);
	}
	   	write_com(0x48+0x08+0x08+0x08);
	for(i=0;i<8;i++)
	{	
		write_data(table5[i]);
	}
	write_com(0x48+0x08+0x08+0x08+0x08);
	for(i=0;i<8;i++)
	{	
		write_data(table6[i]);
	}
}
